/'
/-----------------------------------------------------------------------------------------------------------------------------------------------------------
ステート図
状態遷移図(ステート図)とは、システムの振る舞いを抽象化して表現するために使われます。This behavior is represented as a series of events that can occur in one or more possible states.
https://plantuml.com/ja/state-diagram
/-----------------------------------------------------------------------------------------------------------------------------------------------------------
'/


/'
/-----------------------------------------------------------------------------------------------------------------------------------------------------------
簡単なステート
ステート図の始点と終点は、 [*] で示します。
矢印は、 --> で示します。
/-----------------------------------------------------------------------------------------------------------------------------------------------------------
'/
@startuml
[*] --> State1
State1 --> [*]
State1 : this is a string
State1 : this is another string

State1 -> State2
State2 --> [*]
@enduml


/'
/-----------------------------------------------------------------------------------------------------------------------------------------------------------
ステートの表現を変える
hide empty descriptionを使用し、ステート枠をシンプルにできます。
/-----------------------------------------------------------------------------------------------------------------------------------------------------------
'/
@startuml
hide empty description
[*] --> State1
State1 --> [*]
State1 : this is a string
State1 : this is another string

State1 -> State2
State2 --> [*]
@enduml


/'
/-----------------------------------------------------------------------------------------------------------------------------------------------------------
複合状態
状態は複合することができます。キーワードstateと中括弧を使用して定義することができます。
/-----------------------------------------------------------------------------------------------------------------------------------------------------------
'/
@startuml
scale 350 width
[*] --> NotShooting

state NotShooting {
  [*] --> Idle
  Idle --> Configuring : EvConfig
  Configuring --> Idle : EvConfig
}

state Configuring {
  [*] --> NewValueSelection
  NewValueSelection --> NewValuePreview : EvNewValue
  NewValuePreview --> NewValueSelection : EvNewValueRejected
  NewValuePreview --> NewValueSelection : EvNewValueSaved

  state NewValuePreview {
	 State1 -> State2
  }
}
@enduml


/'
/-----------------------------------------------------------------------------------------------------------------------------------------------------------
長い名前
キーワードstateによって、状態についての長めの記述を使用することができます。
/-----------------------------------------------------------------------------------------------------------------------------------------------------------
'/
@startuml
scale 600 width

[*] -> State1
State1 --> State2 : Succeeded
State1 --> [*] : Aborted
State2 --> State3 : Succeeded
State2 --> [*] : Aborted
state State3 {
  state "Accumulate Enough Data\nLong State Name" as long1
  long1 : Just a test
  [*] --> long1
  long1 --> long1 : New Data
  long1 --> ProcessData : Enough Data
}
State3 --> State3 : Failed
State3 --> [*] : Succeeded / Save Result
State3 --> [*] : Aborted
@enduml


/'
/-----------------------------------------------------------------------------------------------------------------------------------------------------------
フォーク(非同期実行)
<<fork>> と <<join>> stereotypesを使うことで、フォークノードとジョインノードを表せます。
/-----------------------------------------------------------------------------------------------------------------------------------------------------------
'/
@startuml
state fork_state <<fork>>
[*] --> fork_state
fork_state --> State2
fork_state --> State3

state join_state <<join>>
State2 --> join_state
State3 --> join_state
join_state --> State4
State4 --> [*]
@enduml


/'
/-----------------------------------------------------------------------------------------------------------------------------------------------------------
同時状態
記号-- or || で分離することで、同時状態となる複合状態を定義することができます。
/-----------------------------------------------------------------------------------------------------------------------------------------------------------
'/
@startuml
[*] --> Active

state Active {
  [*] -> NumLockOff
  NumLockOff --> NumLockOn : EvNumLockPressed
  NumLockOn --> NumLockOff : EvNumLockPressed
  --
  [*] -> CapsLockOff
  CapsLockOff --> CapsLockOn : EvCapsLockPressed
  CapsLockOn --> CapsLockOff : EvCapsLockPressed
  --
  [*] -> ScrollLockOff
  ScrollLockOff --> ScrollLockOn : EvScrollLockPressed
  ScrollLockOn --> ScrollLockOff : EvScrollLockPressed
}
@enduml


/'
/-----------------------------------------------------------------------------------------------------------------------------------------------------------
矢印の方向
記号->を水平矢印として使用でき、以下の構文を使用することで、矢印の方向を支配することができます。

-down-> (default arrow)
-right-> or ->
-left->
-up->
/-----------------------------------------------------------------------------------------------------------------------------------------------------------
'/
@startuml
[*] -up-> First
First -right-> Second
Second --> Third
Third -left-> Last
@enduml


/'
/-----------------------------------------------------------------------------------------------------------------------------------------------------------
方向を示す単語の、最初の文字だけ（例：-down-の代わりに-d-）、または2文字（-do-）を使用することで、矢印の記述を短くすることができます。
この機能を乱用しないよう注意しなくてはいけません：通常、Graphvizは微調整なしでよい結果をもたらしてくれます。

= 注釈 =
キーワード note left of, note right of, note top of, note bottom of を使用して注釈を定義することができます。

さらに、いくつもの行で注釈を定義できます。
/-----------------------------------------------------------------------------------------------------------------------------------------------------------
'/
@startuml
[*] --> Active
Active --> Inactive

note left of Active : this is a short\nnote

note right of Inactive
  A note can also
  be defined on
  several lines
end note
@enduml


/'
/-----------------------------------------------------------------------------------------------------------------------------------------------------------
さらに、状態にひもづかない注釈を定義できます。
/-----------------------------------------------------------------------------------------------------------------------------------------------------------
'/
@startuml
state foo
note "This is a floating note" as N1
@enduml


/'
/-----------------------------------------------------------------------------------------------------------------------------------------------------------
もっと注釈
複合状態にも注釈をつけることができます。
/-----------------------------------------------------------------------------------------------------------------------------------------------------------
'/
@startuml
[*] --> NotShooting

state "Not Shooting State" as NotShooting {
  state "Idle mode" as Idle
  state "Configuring mode" as Configuring
  [*] --> Idle
  Idle --> Configuring : EvConfig
  Configuring --> Idle : EvConfig
}

note right of NotShooting : This is a note on a composite state
@enduml


/'
/-----------------------------------------------------------------------------------------------------------------------------------------------------------
見栄え
ダイアグラムの色やフォントを変更するには skinparam コマンドを使用します。

このコマンドは以下の場面で使用できます。

ダイアグラム定義内で他のコマンドを同様に。
インクルードされたファイル内。
設定ファイルのコマンドライン内やANTタスク内。
定型化した状態に、特定の色とフォントを定義することができます。
/-----------------------------------------------------------------------------------------------------------------------------------------------------------
'/
@startuml
skinparam backgroundColor LightYellow
skinparam state {
  StartColor MediumBlue
  EndColor Red
  BackgroundColor Peru
  BackgroundColor<<Warning>> Olive
  BorderColor Gray
  FontName Impact
}

[*] --> NotShooting

state "Not Shooting State" as NotShooting {
  state "Idle mode" as Idle <<Warning>>
  state "Configuring mode" as Configuring
  [*] --> Idle
  Idle --> Configuring : EvConfig
  Configuring --> Idle : EvConfig
}

NotShooting --> [*]
@enduml

